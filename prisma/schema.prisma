// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  email       String   @unique @db.Text
  password    String
  firstName   String
  lastName    String
  companyName String

  Space     Space[]
  suppliers Supplier[]
  Attribute Attribute[]
  Category  Category[]
  Product   Product[]
}

model Space {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  workflowType    String
  flatfileSpaceId String   @unique
  userId          String   @db.Uuid
  User            User     @relation(fields: [userId], references: [id])

  @@unique([userId, workflowType])
}

model Supplier {
  id                 String   @id @default(uuid()) @db.Uuid
  createdAt          DateTime @default(now())
  externalSupplierId String
  name               String
  email              String?  @db.Text
  phone              String?
  address            String
  city               String
  state              String
  country            String

  userId   String    @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@unique([userId, externalSupplierId])
}

model Product {
  id                String   @id @default(uuid()) @db.Uuid
  createdAt         DateTime @default(now())
  externalProductId String
  name              String
  description       String?
  price             Float
  quantity          Int
  imageUrl          String?

  categoryId String      @db.Uuid
  category   Category    @relation(fields: [categoryId], references: [id])
  supplierId String      @db.Uuid
  supplier   Supplier    @relation(fields: [supplierId], references: [id])
  userId     String      @db.Uuid
  user       User        @relation(fields: [userId], references: [id])
  attributes Attribute[]

  @@unique([userId, externalProductId])
}

model Attribute {
  id                  String   @id @default(uuid()) @db.Uuid
  createdAt           DateTime @default(now())
  externalAttributeId String
  name                String
  value               String
  unit                String?

  userId   String    @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@unique([userId, externalAttributeId])
}

model Category {
  id                 String   @id @default(uuid()) @db.Uuid
  createdAt          DateTime @default(now())
  externalCategoryId String
  name               String
  description        String?

  userId   String    @db.Uuid
  user     User      @relation(fields: [userId], references: [id])
  products Product[]

  @@unique([userId, externalCategoryId])
}
